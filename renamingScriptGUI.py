# https://build-system.fman.io/pyqt5-tutorial
# https://guiguide.readthedocs.io/en/latest/gui/qt.html#widgets
# https://doc.qt.io/qt-5/qwidget.html#details
# http://zetcode.com/gui/pyqt5/eventssignals/

import sys
from PyQt5 import QtCore, QtGui
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QPushButton, QRadioButton, QPlainTextEdit, QFileDialog


# MainPage inherits QWidget class
class MainPageUI(QWidget):
    # constructor
    def __init__(self, title=""):
        super().__init__()

        # self is the same as 'this' in other programming languages
        self.title = title
        self.fileLoc = ""
        self.initWindow()

    # create UI objects (most content in it is auto generated by Qt Creator IDE)
    def initWindow(self):
        self.setObjectName("mainWindow")
        self.resize(400, 300)
        self.renameRadio = QRadioButton(self)
        self.renameRadio.setGeometry(QtCore.QRect(30, 100, 171, 16))
        self.renameRadio.setObjectName("renameRadio")
        self.fixNameRadio = QRadioButton(self)
        self.fixNameRadio.setGeometry(QtCore.QRect(30, 120, 171, 17))
        self.fixNameRadio.setObjectName("fixNameRadio")
        self.step1 = QLabel(self)
        self.step1.setGeometry(QtCore.QRect(30, 20, 47, 13))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.step1.setFont(font)
        self.step1.setObjectName("step1")
        self.step2 = QLabel(self)
        self.step2.setGeometry(QtCore.QRect(30, 80, 47, 13))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.step2.setFont(font)
        self.step2.setObjectName("step2")
        self.step3 = QLabel(self)
        self.step3.setGeometry(QtCore.QRect(30, 160, 47, 13))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.step3.setFont(font)
        self.step3.setObjectName("step3")
        self.newNameTB = QPlainTextEdit(self)
        self.newNameTB.setGeometry(QtCore.QRect(100, 180, 191, 21))
        self.newNameTB.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.newNameTB.setObjectName("newNameTB")
        self.newName = QLabel(self)
        self.newName.setGeometry(QtCore.QRect(40, 180, 61, 20))
        self.newName.setObjectName("newName")
        self.clearBtn = QPushButton(self)
        self.clearBtn.setGeometry(QtCore.QRect(220, 250, 75, 23))
        self.clearBtn.setObjectName("clearBtn")
        self.okBtn = QPushButton(self)
        self.okBtn.setGeometry(QtCore.QRect(310, 250, 75, 23))
        self.okBtn.setObjectName("okBtn")
        self.label = QLabel(self)
        self.label.setGeometry(QtCore.QRect(40, 40, 71, 16))
        self.label.setObjectName("label")
        self.folderLocTB = QPlainTextEdit(self)
        self.folderLocTB.setGeometry(QtCore.QRect(110, 40, 181, 21))
        self.folderLocTB.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.folderLocTB.setReadOnly(True)      # prevent user from typing in content of fie loc directly
        self.folderLocTB.setObjectName("folderLocTB")
        self.selFolderBtn = QPushButton(self)
        self.selFolderBtn.setGeometry(QtCore.QRect(300, 40, 75, 23))
        self.selFolderBtn.clicked.connect(self.selectingFolder)     # bind object's event handler to own method
        self.selFolderBtn.setObjectName("selFolderBtn")

        self.retranslateUi()
        self.enableFeatures()   # disable step 2, 3, and ok button at the start
        QtCore.QMetaObject.connectSlotsByName(self)

        self.show()

    # add text/labels to the UI
    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("mainWindow", self.title))
        self.renameRadio.setText(_translate("mainWindow", "Rename all the files in the folder"))
        self.fixNameRadio.setText(_translate("mainWindow", "Fix the file names"))
        self.step1.setText(_translate("mainWindow", "Step 1:"))
        self.step2.setText(_translate("mainWindow", "Step 2:"))
        self.step3.setText(_translate("mainWindow", "Step 3:"))
        self.newName.setText(_translate("mainWindow", "New name:"))
        self.clearBtn.setText(_translate("mainWindow", "Clear"))
        self.okBtn.setText(_translate("mainWindow", "Ok"))
        self.label.setText(_translate("mainWindow", "Select folder: "))
        self.selFolderBtn.setText(_translate("mainWindow", "Open"))

    # ######## End of UI setup #########

    def enableFeatures(self):
        if self.fileLoc == "":
            self.step2.setStyleSheet("QLabel { color : grey; }")  # set "step 2" to grey to look "disabled"
            self.renameRadio.setDisabled(True)  # step 1 (choosing file) not fulfilled so disable step 2
            self.fixNameRadio.setDisabled(True)  # step 1 (choosing file) not fulfilled so disable step 2

            self.step3.setStyleSheet("QLabel { color : grey; }")  # set "step 3" to grey to look "disabled"
            self.newName.setStyleSheet("QLabel { color : grey; }")  # set "New name:" to grey to look "disabled"
            self.newNameTB.setDisabled(True)  # step 1 (choosing file) and step 2 not fulfilled so disable step 3

            self.okBtn.setDisabled(True)  # Ok button disabled at the start

            return
        else:
            self.step2.setStyleSheet("QLabel { color : black; }")  # set "step 2" to grey to look "disabled"
            self.renameRadio.setDisabled(False)  # step 1 (choosing file) not fulfilled so disable step 2
            self.fixNameRadio.setDisabled(False)  # step 1 (choosing file) not fulfilled so disable step 2

    # obtain the directory path of the folder which content to be renamed
    def selectingFolder(self):
        self.fileLoc = str(QFileDialog.getExistingDirectory(self, "Select Directory"))
        self.folderLocTB.setPlainText(self.fileLoc)
        self.enableFeatures()


def main():
    app = QApplication(sys.argv)

    win = MainPageUI(title="RenamingScript (GUI Version)")

    # app.exec_() same as app.exec(). Both returns 0 to exit() if quit() is called
    sys.exit(app.exec_())


# to only run main function only if this file is run as the main file
# good for reusability of other classes in files
if __name__ == "__main__":
    main()
